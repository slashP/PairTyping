@model int


<div id="typing-area">
    <div class="col-md-6">
        <div id="stopwatch" class="small-margin-top" style="visibility: hidden">
            <span class="btn btn-info" data-bind="click: restartGame">Restart</span>
            <span data-bind="text: stopwatch"></span>
        </div>
        <div class="small-margin-top" data-bind="with: game">
            <div class="text-info well" data-bind="foreach: lines" style="font-family: Consolas">
                <div class="type-line"><span data-bind="visible: indent">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="text-success type-line" data-bind="text: correct"></span><span class="text-danger type-line" data-bind="text: wrong"></span><span class="type-line" data-bind="text: remaining, attr:{first: remaining()[0]}, css:{'caret-blink':$parent.currentLineNumber() == $index()}"></span></div>
            </div>
        </div>
    </div>
</div>

<script src="/Scripts/knockout-3.1.0.js"></script>
<script src="/Scripts/Home/stopwatch.js"></script>
<script src="/Scripts/Home/TypingVm.js"></script>
<script>
    var typing = new TypingVM();
    ko.applyBindings(typing, document.getElementById("typing-area"));
    $.get("/api/highscore/recording?id=" + @(Model), function(result) {
        var recordings = JSON.parse(result.Recordings);
        var previousTime = 0;
        var elementsTaken = 0;
        var timeout = 10;
        var intVal = setInterval(tick, timeout);
        function tick() {
            if (elementsTaken >= recordings.length) {
                clearInterval(intVal);
                setTimeout(function() {
                    elementsTaken = 0;
                    previousTime = 0;
                    typing.restartGame();
                    intVal = setInterval(tick, timeout);
                }, 3000);
                return;
            }
            recordings.slice(elementsTaken).filter(function(recording) {
                return recording.time <= previousTime;
            }).forEach(function(recording) {
                if (recording.action == "keyPress") {
                    invokeKeyPressed(typing, recording.which);
                } else if (recording.action == "keyDown") {
                    invokeKeyDown(typing, recording.which);
                }
                elementsTaken++;
            });
            previousTime += timeout / 1000;
        }
    });

</script>